#include <iostream>

using namespace std;

/*
	변수(Variable) : 데이터를 저장하는 메모리 저장소

	변수를 선언하는 형식
	
	---> " 지정자 변수타입 변수이름 "
	int a = 100;

	# 지정자 종류

	> 선언지정자 : const constexpr --> 변수가 상수임을 선언할 때
	
	> 저장지정자 : 변수의 데이터를 읽고 쓰는 방법을 명시하는 지정자
		
		- volatile 지정자 : 변수로부터 데이터를 읽고 쓸 때 메모리 내에 저장된 변수의 데이터를 사용함
		
		- static 지정자 : 변수가 특정 영역 내에 존재하더라도 지역변수가 아닌 전역변수처럼 사용이 가능하도록 하는 지정자(정적변수)

		  로컬변수(지역변수) : 함수 호출과 함께 생성되고 함수가 반환될 때 삭제되는 특징이 있음
		
		  정적변수 : 함수 호출과 무관하게 데이터의 입출력이 가능한 함수
	  
		- extern 지정자 : 외부 프로그램에 의해 제작되고 컴파일된 실행모듈이나 라이브러리 내에 존재하는 변수
		
		[extern 사용 예]
			extern int x;
			--> exter "C++" int x 와 동일함 
			--> "c++언어로 제작되어 제공되는 변수", "C++로 제작된 외부 오브젝트 모듈, 라이브러리 내에 존재하는 변수" 라는 의미
			--> 위의 변수는 자체 변수가 아니기 때문에 초기화할 수 없음

			extern "C" {extern int y;}
			--> "C언어로 제작된 외부 오브젝트 모듈 내의 변수"라는 의미
			--> extern "C" int y 와 동일함

			extern "C" {int z;}
			--> 변수 선언과 함께 정의된 변수로서 외부에서 사용할 수 있음
			
	# 변수 타입 
	변수에서 사용하는 데이터 타입을 의미. 
	데이터를 저장하는 장소가 실수를 저장하는 변수인지 구조체 또는 문자열을 저장하는 변수인지를 구별하기 위한 목적으로 사용
	
	# 변수 이름 : 변수를 구분하기 위한 이름
		
		변수 선언문(하나의 변수 선언문에서 여러 개의 변수 선언 -> 콤마(,) 사용)
		int a = 0, b = 0;
		
		변수 초기화
		
		int a = 100; // 아래의 명령과 같음

		int a;
		a = 100;

		int a(100); // C++에서 초기화하는 방법

		변수 선언의 예

		int result = 0; // 정수 타입의 변수 선언

		double result = 10.3; // 실수 타입의 변수 선언

		auto name = "Seoul"; // name은 char 타입의 배열로 인식됨

		int foo = 0;
		auto bbb = foo; // bbb 변수는 foo 변수의 데이터 타입으로 인식됨

		decltype(foo) bbb; // bbb 변수는 foo 변수의 정수 타입으로 인식됨

		
		*** auto, decltype 타입은 초기화를 하지 않고 사용할 수 없음
		auto address; // 에러 발생

	# 변수 명명 규칙
		- 대소문자 구분
		- 키워드를 변수명으로 사용할 수 없음(키워드라도 대소문자를 바꾸면 사용 가능)
		- 변수 이름의 첫번째 문자는 반드시 일반문자나 (_)를 사용해야 함(숫자, $와 같은 특수문자를 사용할 수 없음)
		- 첫문자 다음에는 일반 문자와 숫자, 특수문자를 사용할 수 있음
		- 작은 따옴표(')는 첫문자가 아니어도 사용할 수 없음
		- 한글도 사용 가능

		표기법 : CamelCase, PascalCase
		CamelCase ---> backColor, firstName
		PascalCase ---> BackColor, FirstName
*/

int main() {
	int a34$ = 100;

	char 문자;
	문자 = 'a';

	long _Long;

	cout << a34$ << endl;
	cout << 문자 << endl;
}
